include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> 

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    } catch (${2:e:xception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
	{
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;


#------------------string--------------------
snippet lcs
abbr Longest Common Sbusequence
    int lcs(string s,string s2,int len) {
		int c[len+1][len+1];	
		int m = s.size();
		int n = s2.size();
  
		int ret = 0;
		s = ' ' + s;
		s2 = ' ' + s2;
  
		REP(i,1,m+1) c[i][0] = 0;
		REP(j,1,n+1) c[0][j] = 0;
  
		REP(i,1,m+1) {
			REP(j,1,n+1) {
				if(s[i] == s2[j]) c[i][j] = c[i-1][j-1] + 1;
				else c[i][j] = max(c[i-1][j],c[i][j-1]);
				ret = max(ret,c[i][j]);
		    }
	    }
  
		return ret;
    }

snippet split
abbr string split
    vector<string> split(const string &str, char delim) {
		vector<string> res;
		size_t current = 0, found;
		while((found = str.find_first_of(delim, current)) != string::npos) {
			res.push_back(string(str, current, found - current));
			current = found + 1;
		}
		res.push_back(string(str, current, str.size() - current));
		return res;
    }


snippet samesplit
abbr samesplit
    vector<string> samesplit(string s) {
		vector<string> ret;
		rep(i,s.size()) {
			stringstream ss;
			ss << s[i];
			REP(j,i+1,s.size()) {
				if(s[i] == s[j]) {
					ss << s[j];
					i++;
				}
				else break;
			}
			ret.push_back(ss.str());
		}
		return ret;
	}

snippet stringplus
abbr stringplus
	string func(string a,string b) {
		string ret;
		if(a.size() < b.size()) swap(a,b);

		reverse(a.begin(),a.end());
		reverse(b.begin(),b.end());

		int carry = 0;
		rep(i,b.size()) {
			int x = a[i] - '0';
			int y = b[i] - '0';
			int z = x + y + carry;

			carry = z / 10;
			ret.push_back('0' + (z%10));
		}

		REP(i,b.size(),a.size()) {
			int x = a[i] - '0';
			int z = x + carry;

			carry = z / 10;
			ret.push_back('0' + (z%10));
		}

		if(carry) ret.push_back('0' + carry);
		reverse(ret.begin(),ret.end());
		return ret;
	}

#---------- data struct ---------------

snippet     unionfind
abbr        UnionFind
    struct UnionFind {
		vector<int> par,rank;
		int N;
  
		UnionFind(int n) {
			N = n;
			par.resize(n);
			rank.resize(n);
   
			rep(i,n) {
				par[i] = i;
				rank[i] = 0;
			}
		}
  
		int find(int x) {
			if(par[x] == x) return x;
			else return par[x] = find(par[x]);
		}
  
		void unite(int x,int y) {
			x = find(x);
			y = find(y);
   
			if(x == y) return;
   
			if(rank[x] < rank[y]) {
				par[x] = y;
			}
			else {
				par[y] = x;
				if(rank[x] == rank[y]) rank[x]++;
			}
		}
  
		bool same(int x,int y) {
			return find(x) == find(y);
		}
  
		int size() {
			int cnt = 0;
			rep(i,N) if(find(i) == i) cnt++;
			return cnt;
		}
    };

snippet     RMQ-max
abbr        RangeMaximumQuery
	struct RMQ {
		int n;
		vector<int> dat;

		RMQ(int n_) {
			n = 1;
			while(n < n_) n *= 2;

			dat.resize(n*4);
			rep(i,n*4) dat[i] = -INF;
		}

		void update(int k,int a) {
			int i = k+n-1;
			dat[i] = a;

			while(i > 0) {
				i = (i-1) / 2;
				dat[i] = max(dat[i*2+1],dat[i*2+2]);
			}
		}

		//[a,b)
		//query(a,b,0,0,n)
		int _query(int a,int b,int k,int l,int r)
		{
			if(r <= a || b <= l) return -INF;

			if(a <= l && r <= b) return dat[k];
			else { 
				int vl = _query(a,b,k*2+1,l,(l+r)/2);
				int vr = _query(a,b,k*2+2,(l+r)/2,r);
				return max(vl,vr);
			}
		}

		//[a,b)
		int query(int a,int b) {
			return _query(a,b,0,0,n);
		}
	};

snippet     RMQ-min
abbr        RangeMinimumQuery
	struct RMQ {
		int n;
		vector<int> dat;

		RMQ(int n_) {
			n = 1;
			while(n < n_) n *= 2;

			dat.resize(n*4);
			rep(i,n*4) dat[i] = -INF;
		}

		void update(int k,int a) {
			int i = k+n-1;
			dat[i] = a;

			while(i > 0) {
				i = (i-1) / 2;
				dat[i] = min(dat[i*2+1],dat[i*2+2]);
			}
		}

		//[a,b)
		//query(a,b,0,0,n)
		int _query(int a,int b,int k,int l,int r)
		{
			if(r <= a || b <= l) return -INF;

			if(a <= l && r <= b) return dat[k];
			else { 
				int vl = _query(a,b,k*2+1,l,(l+r)/2);
				int vr = _query(a,b,k*2+2,(l+r)/2,r);
				return min(vl,vr);
			}
		}

		//[a,b)
		int query(int a,int b) {
			return _query(a,b,0,0,n);
		}
	};

snippet BIT
abbr Binary Indexed Tree
    struct BIT {
		vector<int> bit;
  
		BIT(int n) : bit(n+1) {}
  
		int sum(int i) {
			int s = 0;
			while(i > 0) {
				s += bit[i];
				i -= i & -i;
			}
			return s;
		}
  
		void add(int i,int x) {
			while(i <= bit.size()) {
				bit[i] += x;
				i += i & -i;
			}
		}
    };

snippet Trie
abbr Trie Tree
    struct Trie {
		Trie *next[26];
		bool end;
  
		Trie() {
			fill(next,next+26,(Trie *)0);
		}
  
		void insert(string &s,int i) {
			if(i == s.size()) {
				this->end = true;
				return;
			}
   
			if(this->next[s[i]-'a'] == NULL) {
				this->next[s[i]-'a'] = new Trie();
			}
   
			this->next[s[i]-'a']->insert(s,i+1);
		}
  
		bool find(string &s,int i,int cnt) {
			if(cnt > 1) return false;

			if(i == s.size()) {
				if(cnt == 1 && this->end) return true;
				else return false;
			}
   
			rep(j,3) {
				if(this->next[j] != NULL) {
					if(s[i]-'a' == j) {
						if(this->next[j]->find(s,i+1,cnt)) return true;
					}
			    	else {
						if(this->next[j]->find(s,i+1,cnt+1)) return true;
					}
				}
			}
			return false;
		}
    };

snippet     SuffixArray
abbr        SuffixArray
	int rank[100005],tmp[100005];
	bool compare_sa(int i,int j) {
		if(rank[i] != rank[j]) return rank[i] < rank[j];
		else {
			int ri = i + k <= n ? rank[i+k] : -1;
			int rj = j + k <= n ? rank[j+k] : -1;
			return ri < rj;
		}
	}

	void construct_sa(string s,int *sa) {
		n = s.size();

		for(int i=0; i <= n; i++ ) {
			sa[i] = i;
			rank[i] = i < n ? s[i] : -1;
		}

		for(k = 1; k <= n; k *= 2) {
			sort(sa, sa+n+1, compare_sa);

			tmp[sa[0]] = 0;
			for(int i=1 ; i <= n; i++) {
				tmp[sa[i]] = tmp[sa[i-1]] + (compare_sa(sa[i-1], sa[i]) ? 1 : 0);
			}

			for(int i=0; i <= n; i++) {
				rank[i] = tmp[i];
			}
		}
	}

snippet     sa_contain
abbr        SuffixArray-contain
	bool contain(string s,int *sa,string t) {
		int l = 0, r = s.size();
		while(r - l > 1) {
			int mid = (l+r) / 2;

			if(s.compare(sa[mid],t.size(),t) < 0) l = mid;
			else r = mid;
		}

		return s.compare(sa[r],t.size(),t) == 0;
	}

#------------- geometory------------------
snippet to_rad
abbr deg->rad
    double to_rad(double deg) {
		return deg*PI/180;
	}

snippet equals
abbr geo equals
    #define equals(a,b) fabs((a) - (b)) < EPS

snippet     Point
abbr        point2
    struct Point {
		double x, y;
  
		Point(double x=0, double y=0) : x(x), y(y) {}
  
		Point operator+(const Point &o) const { return Point(x+o.x, y+o.y); }

		Point operator-(const Point &o) const { return Point(x-o.x, y-o.y); }

		Point operator*(const double m) const { return Point(x*m, y*m); }

		Point operator/(const double d) const { return Point(x/d, y/d); }

		bool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }
  
		bool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }
  
		double cross(const Point &o) const { return x * o.y - y * o.x; }
  
		double dot(const Point &o) const { return x * o.x + y * o.y; }

		double atan() const { return atan2(y, x); }

		double norm() const { return sqrt(dot(*this)); }

		double distance(const Point &o) const { return (o - (*this)).norm(); }

		double area(const Point &a,const Point &b) {
			Point p = a - (*this), p2 = b - (*this); 
			return p.cross(p2);
		}
  
		double area_abs(const Point &a,const Point &b) const {
			Point p = a - (*this), p2 = b - (*this);
			return fabs(p.cross(p2)) / 2.0;
		}	
  
		//線分abが自身に含まれているのかどうか判断する
		int between(const Point &a,const Point &b) {
			if(area(a,b) != 0) return 0;
   
			if(a.x != b.x)  return ((a.x <= x) && (x <= b.x) || (a.x >= x) && (x >= b.x));
			else return ((a.y <= y) && (y <= b.y) || (a.y >= y) && (y >= b.y));
		}      
    
		double distance_seg(const Point& a,const Point& b) {
			if((b-a).dot(*this-a) < EPS) {
				return (*this-a).norm();
			}
			if((a-b).dot(*this-b) < EPS) {
				return (*this-b).norm();
			}
			return abs((b-a).cross(*this-a)) / (b-a).norm();
		}

		bool hitPolygon(const Point& a,const Point& b,const Point& c) {
			double t = (b-a).cross(*this-b);
			double t2 = (c-b).cross(*this-c);
			double t3 = (a-c).cross(*this-a);	

			if((t > 0 && t2 > 0 && t3 > 0) || ( t < 0 && t2 < 0 && t3 < 0)) {
				return true;
			}

			return false;
		}
    };
   
snippet     ccw
abbr        clockwise
    int ccw(Point a,Point b,Point c) {
		b = b-a;
		c = c-a;
  
		if(b.cross(c) > 0.0) return +1;	//conter clockwise
		if(b.cross(c) < 0.0) return -1;	//clockwise
		if(b.dot(c) < 0.0) return +2;	//a on Seg(b,c)
		if(b.norm() < c.norm()) return -2;	//b on Seg(a,c)
		return 0;	//c on Seg(a,b)
    }

snippet polygonArea
abbr geometory
    double polygonArea(const vector<Point>& p) {
		int n = p.size();
		double ret = 0.0;
		for(int i=0; i<n; ++i) {
			ret += p[i].cross(p[(i+1)%n]);
		}

		return abs(ret) / 2.0;
	}

snippet convex_hull
abbr convex_hull
    vector<Point> convex_hull(vector<Point> ps) {   
		int N = ps.size();
		sort(ps.begin(),ps.end());
  
		int k = 0;
		vector<Point> convex(N*2);
  
		rep(i,N) {
			while (2 <= k && (convex[k-1] - convex[k-2]).cross(ps[i] - convex[k-1]) <= 0 ) {
				k--;
			}
			convex[k++] = ps[i];
		}

		for(int i = N-2,t = k; 0 <= i;i--) {
			while (t < k && (convex[k-1] - convex[k-2]).cross(ps[i] - convex[k-1]) <= 0 ) {
				k--;
			}
			convex[ k++ ] = ps[i];
		}
  
		convex.resize(k-1);
		return convex;
	}

snippet Seg
abbr segment2
	struct Seg {
		Point a,b;

		Seg (Point a, Point b) : a(a),b(b) {}

		bool isOrthogonal(Seg &s) { return equals((b - a).dot(s.b - s.a),0.0); }

		bool isParallel(Seg &s) { return equals((b-a).cross(s.b - s.a),0.0); }

		bool isIntersect(Seg &s) {
			if(s.a.between(a,b) || s.b.between(a,b) || a.between(s.a,s.b) || b.between(s.a,s.b)) {
				return true;
			}
			return ((a-b).cross(s.a-a) * (a-b).cross(s.b-a) < EPS) && ((s.b-s.a).cross(a-s.a)*(s.b-s.a).cross(b-s.a) < EPS);
		}

		bool distance(Seg &s) {
			if((*this).isIntersect(s)) return 0.0;

			return min(min(a.distance_seg(s.a,s.b),b.distance_seg(s.a,s.b)),min(s.a.distance_seg(a,b),s.b.distance_seg(a,b)));
		}

		Point getCrossPoint(Seg &s) {
			Point p = s.b - s.a;
			double d = abs(p.cross(a-s.a));
			double d2 = abs(p.cross(b-s.a));

			double t = d / (d+d2);
			return a + (b-a)*t;
		}

		Point project(Point &p) {
			Point base = b - a;
			double t = base.dot(p-a) / base.dot(base);
			return a + base * t;
		}

		Point reflect(Point &p) {
			return p + (project(p) - p) * 2.0;
		}
	};

snippet Circle
abbr circle
	struct Circle {
		Point p;
		double r;

		Circle() : p(Point(0,0)), r(0) {}

		Circle(Point o, double r) : p(o), r(r) {}

		Circle(double x,double y, double r) : p(Point(x,y)), r(r) {}

		bool isCircleIn(const Point& o) {
			Point res = o-p;
			return res.dot(res) < r*r + EPS;
		}

		// 1:外で接する，0:交差なし，-1:内で接する，2:交差，-2:内包
		int isIntersect(const Circle& c) {
			double d = (c.p - p).dot(c.p - p);
			double len = (c.r + r) * (c.r + r);

			if(equals(d,len)) return 1;
			if(d > len) return 0;

			double R = fabs(c.r - r) * fabs(c.r - r);
			if(equals(d,R)) return -1;
			if(d > R) return 2;
			return -2;
		}

		vector<Point> getCrossPoint(const Circle& c) {
			vector<Point> ret;
			int ch = isIntersect(c);

			if(ch == 0 || ch == -2) return ret;

			Point base = c.p - p;
			double len = base.dot(base);
			double t = (r*r - c.r*c.r + len) / (2.0 * len);

			if(ch == 2) {
				Point n(-base.y,base.x);
				n = n / (n.norm());
				double h = sqrt(r * r - t*t*len);

				ret.push_back(p + (base*t) + (n*h));
				ret.push_back(p + (base*t) - (n*h));
			} else {
				ret.push_back(p + (base*t));
			}

			return ret;
		}
	};


#----------- matrix ---------------------
snippet     mat
abbr        matrix init
	typedef vector<double> vec;
	typedef vector<vec> mat;

	mat identity(int n) {
		mat A(n, vec(n));
		rep(i,n) A[i][i] = 1;
		return A;
	}

	double inner_product(const vec& a, const vec& b) {
		double ans = 0;
		rep(i,a.size()) {
			ans += a[i] * b[i];
		}
		return ans;
	}

	vec mul(const mat& A, const vec& x) {
		int n = A.size(), m = A[0].size();
		vec y(n);

		rep(i,n) {
			rep(j,m) {
				y[i] = A[i][j] * x[j];
			}
		}

		return y;
	}

	mat mul(const mat& A, const mat& B) {
		int n = A.size(), m = A[0].size();
		mat C(n, vec(m));

		rep(i,C.size()) {
			rep(j, C[i].size()) {
				rep(k, A[i].size()) {
					C[i][j] += A[i][k] * B[k][j];
				}
			}
		}

		return C;
	}


	mat pow(const mat& A, int e) {
		return e == 0 ? identity(A.size()) : e % 2 == 0 ? pow(mul(A,A), e/2) : mul(A, pow(A, e-1));
	}

	double det(mat A) {
		int n = A.size();
		double ret = 1;
		rep(i,n) {
			int pivot = i;
			REP(j, i+1, n) {
				if(abs(A[j][i]) > abs(A[pivot][i])) pivot = j;
			}

			swap(A[pivot], A[i]);
			ret *= A[i][i] * (i != pivot ? -1 : 1);
			if(abs(A[i][i]) < EPS) break;

			REP(j,i+1,n) {
				for(int k=n-1; k>=i ; k--) {
					A[j][k] -= A[i][k] * A[j][i] / A[i][i];
				}
			}
		}

		return ret;
	}

	double tr(const mat& A) {
		double ret = 0;
		rep(i,A.size()) {
			ret += A[i][i];
		}
		return ret;
	}

	int rank(mat& A) {
		int n = A.size(), m = A[0].size();
		int ret = 0;

		for(int i=0; i < n && ret < n; i++) {
			int pivot = ret;
			REP(j,ret+1,n) {
				if(abs(A[j][i]) > abs(A[pivot][i])) pivot = j;
			}
			
			swap(A[pivot], A[ret]);

			if(abs(A[ret][i]) < EPS) continue;

			for(int k=m-1; k >= i; k--) {
				A[ret][k] /= A[ret][i];
			}

			REP(j, ret+1, n) {
				REP(k, i, m) {
					A[j][k] -= A[ret][k] * A[j][i];
				}
			}

			ret++;
		}

		return ret;
	}

snippet gauss_jordan
abbr O(n^3)
	vec gauss_jordan(const mat& A, const vec& b) {
		int n = A.size();
		mat B(n, vec(n+1) );

		rep(i, n) {
			rep(j, n) B[i][j] = A[i][j];
		}

		rep(i, n) B[i][n] = b[i];

		rep(i, n) {
			int pivot = i;
			REP(j, i, n) {
				if(abs(B[j][i]) > abs(B[pivot][i])) pivot = j;
			}

			swap(B[i], B[pivot]);

			if(abs(B[i][i]) < EPS) return vec();

			REP(j, i+1, n+1) B[i][j] /= B[i][i];
			rep(j, n) {
				if(i != j) {
					REP(k, i+1, n+1) {
						B[j][k] -= B[j][i] * B[i][k];
					}
				}
			}
		}

		vec x(n);
		rep(i, n) x[i] = B[i][n];
		return x;
	}

#------------- graph theory------------------

snippet edge
abbr edge
    struct edge {
		int from,to;
		int cost;

		edge(int t,int c) : to(t),cost(c) {}
		edge(int f,int t,int c) : from(f),to(t),cost(c) {}
  
		bool operator<(const edge &e) const {
			return cost < e.cost;
		}
	};

snippet find_negative_loop
abbr need vector<edge> E
	bool find_negative_loop(int n) {
		memset(d,0,sizeof(d));
		
		rep(i,n) {
			rep(j,E.size()) {
				edge e = E[j];
				if(d[e.to] > d[e.from] + e.cost) {
					d[e.to] = d[e.from] + e.cost;

					if(i == n-1) return true;
				}
			}
		}

		return false;
	}


snippet dijkstra
abbr G,d and edge
    void dijkstra(int s,int n) {
		priority_queue<P,vector<P>,greater<P> > que;
		fill(d,d+n,INF);
  
		d[s] = 0;
		que.push(P(0,s));
  
		while(que.size()) {
			P p = que.top();
			que.pop();
   
			int v = p.second;
			if(d[v] < p.first) continue;
   
			rep(i,G[v].size()) {
				edge e = G[v][i];
				if(d[e.to] > d[v] + e.cost) {
					d[e.to] = d[v] + e.cost;
					que.push(P(d[e.to],e.to));
				}
			}
		}
  }

snippet get_path
abbr prev
    vector<int> get_path(int t) {
		vector<int> path;
		for(;t!=-1;t=prev[t]) path.push_back(t);
		reverse(path.begin(),path.end());
		return path;
    }

snippet warshall_floyd
abbr warshall_floyd
	void warshall_floyd(int n) {
		rep(i,n) rep(j,n) d[i][j] = INF;
		rep(i,n) d[i][i] = 0;

		rep(k,n) {
			rep(i,n) {
				rep(j,n) {
					d[i][j] = min(d[i][j],d[i][k] + d[k][j]);
				}
			}
		}
	}

snippet     kruskal
abbr        kruskal
    int kruskal(int n,vector<edge> v) {
		sort(v.begin(),v.end());
		UnionFind uf(n);
  
		int ret = 0;
		rep(i,v.size()) {
			edge e = v[i];
			if(!uf.same(e.from,e.to)) {
				uf.unite(e.from,e.to);
				ret += e.cost;
			}
		}
		return ret;
    }

snippet minimum_spanning_arborescence
abbr Chu-Liu,Edmond
	void backward_traverse(int v,int s,int r,vector<edge> gg[],vector<int> &no,vector<vector<int> > &comp,vector<int> &prev,vector<vector<int> > &next,vector<int> &mcost,vector<int> &mark,int &cost,bool &found,int n) {

		if(mark[v]) {
			vector<int> temp = no;
			found = true;

			do {
				cost += mcost[v];
				v = prev[v];

				if(v != s) {
					while(comp[v].size() > 0) {
						no[comp[v].back()] = s;
						comp[s].push_back(comp[v].back());
						comp[v].pop_back();
					}
				}
			}while(v != s);

			rep(k,comp[s].size()) {
				int j = comp[s][k];
				if(j != r) {
					rep(l,gg[j].size()) {
						if(no[gg[j][l].from] != s) {
							gg[j][l].cost -= mcost[temp[j]];
						}
					}
				}
			}
		}

		mark[v] = true;
		rep(k,next[v].size()) {
			int i = next[v][k];
			if(no[i] != no[v] && prev[no[i]] == v) {
				if(!mark[no[i]] || i == s) {
					backward_traverse(i,s,r,gg,no,comp,prev,next,mcost,mark,cost,found,n);
				}
			}
		}
	}

	int minimum_spanning_arborescence(vector<edge> G[],int n,int r) {
		vector<edge> gg[n];

		rep(i,n) {
			rep(j,G[i].size()) {
				edge e = G[i][j];
				gg[e.to].push_back(e);
			}
		}

		vector<int> no(n);
		vector<vector<int> > comp(n);

		rep(i,n) {
			no[i] = i;
			comp[i].push_back(i);
		}

		int cost = 0;
		while(true) {
			vector<int> prev(n,-1);
			vector<int> mcost(n,INF);

			rep(j,n) {
				if(j == r) continue;

				rep(k,gg[j].size()) {
					int i = gg[j][k].from;

					if(no[i] != no[j]) {
						if(gg[j][k].cost < mcost[no[j]]) {
							mcost[no[j]] = gg[j][k].cost;
							prev[no[j]] = no[i];
						}
					}
				}
			}

			vector<vector<int> > next(n);
			rep(i,n) {
				if(prev[i] >= 0) {
					next[prev[i]].push_back(i);
				}
			}

			bool stop = true;
			vector<int> mark(n);
			rep(i,n) {
				if(i == r || mark[i] || comp[i].size() == 0) continue;
				
				bool found = false;
				backward_traverse(i,i,r,gg,no,comp,prev,next,mcost,mark,cost,found,n);

				if(found) stop = false;
			}

			if(stop) {
				rep(i,n) {
					if(prev[i] >= 0) cost += mcost[i];
				}

				return cost;
			}
		}
	}


snippet     max_flow
abbr        s:0->t:n+m+1
    struct edge {
		int to,cap,rev;
		
		edge(int t,int c,int r) {
			to = t;
			cap = c;
			rev = r;
		}
    };

    vector<edge> G[105];
    bool used[105];

    void add_edge(int from,int to,int cap) {
		G[from].push_back(edge(to,cap,G[to].size()));
		G[to].push_back(edge(from,0,G[from].size()-1));
    }

    int dfs(int v,int t,int f) {
		if(v == t) return f;
		used[v] = true;
  
		rep(i,G[v].size()) {
			edge &e = G[v][i];
			if(!used[e.to] && e.cap > 0) {
				int d = dfs(e.to,t,min(f,e.cap));
				if(d > 0) {
					e.cap -= d;   
					G[e.to][e.rev].cap += d; 
					return d;
				}
			}
		}
		return 0;
    }

    int max_flow(int s,int t) {
		int flow = 0;
		for(;;) {
			memset(used,0,sizeof(used));
			int f = dfs(s,t,INF);
			if(f == 0) return flow;
			flow += f;
		}
    }

snippet tpologicalsort
abbr toposo for dfs
	void dfs(int cur) {
		used[cur] = true;
		rep(i,G[cur].size()) {
			int v = G[cur][i].to;
			if(!used[v]) dfs(v);
		}

		out.push_back(cur);
	}


# ------------------- number theory ----------------

snippet Eratosthenes
abbr prime
    bool prime[10000000];
    void Eratosthenes(int n) {
		rep(i,n) prime[i] = true;
		prime[1] = false;
  
		REP(i,2,(int)sqrt(n)) {
			if(prime[i]) {
				for(int j=0;i*(j+2)<n;j++) {
					prime[i*(j+2)] = 0;
				}
			}
		}
	}

snippet is_prime
abbr is_prime
	bool is_prime(ll n) {
		for(ll i = 2; i*i <= n; i++) {
			if(n % i == 0) return false;
		}
		return true;
	}

snippet divisor
abbr divisor
	vector<ll> divisor(ll n) {
		vector<ll> res;
		for(ll i = 2; i*i <= n; i++) {
			if(n % i == 0) {
				res.push_back(i);
				if(i != n/i) res.push_back(n/i);
			}
		}
		return res;
	}

snippet prime_factor map
abbr prime_factor map
	map<ll,ll> prime_factor(ll n) {
		map<ll,ll> res;
		for(ll i=2; i*i <= n; i++) {
			while(n%i == 0) {
				res[i]++;
				n /= i;
			}
		}

		if(n != 1) res[n] = 1;
		return res;
	}

snippet prime_factor vector
abbr prime_factor vector
	vector<ll> prime_factor(ll n) {
		vector<ll> res;
		if(n == 1) return res;

		for(ll i = 2; i*i <= n; i++) {
			while(n%i == 0) {
				res.push_back(i);
				n /= i;
			}
		}

		if(n != 1) res.push_back(n);
		return res;
	}

snippet lcm
abbr lcm
    int lcm(int m,int n) {
		if(m == 0 || n == 0) return 0;
		return ((m / __gcd(m,n)) * n);
    }

snippet extgcd
abbr a*x+b*y=1
    ll extgcd(ll a,ll b,ll &x,ll &y) {
		ll g = a;
		x = 1,y = 0;

		if(b != 0) {
			g = extgcd(b,a%b,y,x);
			y -= (a / b) * x;
		}
  
		return g;
    }

snippet nCr
abbr MOD,memo[2005][2005]
	ll nCr(ll n,ll r)
	{
		if(n < r) return 0;
		if(n == r) return 1;
		if(r == 1) return n;
		if(memo[n][r] != -1) return memo[n][r];

		return memo[n][r] = (nCr(n-1,r)+nCr(n-1,r-1))%MOD;
	}

snippet mod_pow
abbr mod_pow
	ll mod_pow(ll x,ll n) {
		ll res = 1;
		while(n > 0) {
			if(n&1) res = res * x % MOD;
			x = x * x % MOD;
			n >>= 1;
		}
		return res;
	}

snippet mod_inverse
abbr inverse
	ll mod_inverse(ll a,ll m) {
		ll x,y;
		extgcd(a,m,x,y);
		return (m + x%m) % m;
	}

snippet fft
abbr	need complex | -1 inverse
	void fft(vector<C> &f,int n,int dir) {
		if(n == 1) return;
		vector<C> a(n/2),b(n/2);
		
		rep(i,n/2) {
			a[i] = f[i*2];
			b[i] = f[i*2+1];
		}

		fft(a,n/2,dir);
		fft(b,n/2,dir);

		C zeta = polar(1.0,dir*2*PI/n);
		C pow_zeta(1.0,0.0);

		rep(i,n) {
			int id = i % (n/2);
			f[i] = a[id] + pow_zeta * b[id];
			pow_zeta *= zeta;
		}
	}

snippet comvolution
abbr	comvolution fft
	vector<int> convolution(vector<int> aa,vector<int> bb){
		vector<C> a,b,c;

		rep(i,aa.size()) {
			a.push_back(C(aa[i],0));
			b.push_back(C(bb[i],0));
		}

		int n = 1;
		while(n <= a.size() + b.size()) n *= 2;

		a.resize(n);
		b.resize(n);
		c.resize(n);

		fft(a,n, +1);
		fft(b,n, +1);
		rep(i,n) c[i] = a[i]*b[i];
		//inverse
		fft(c,n,-1);
		
		vector<int> res(n);
		rep(i,n) { 
			res[i] = int(c[i].real()/n + 0.5);
		};

		return res;
	}

# -------------------- STL ------------------
snippet remove
abbr remove
	v.erase(remove(v.begin(),v.end(),${0}),v.end());

snippet unique
abbr unique
	v.erase(unique(v.begin(),v.end()),v.end());

snippet rotate
abbr rotate
	rotate(v.begin(),v.begin()+${0},v.end());

snippet copy
abbr iterator v -> v2
	copy(v.begin(),v.end(),back_inserter(v2));



# ------------------- search -----------------
snippet meiro
abbr meiro def
	int w,h,x,y;
	int sx,sy,gx,gy;
	int dx[4] = {1,0,-1,0};
	int dy[4] = {0,1,0,-1};

	bool can(int y,int x) {
		if(0 <= y && y < h && 0 <= x && x < w) return true;
		return false;
	}

snippet d3
abbr 3d vector
	int dx[13] = { 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1};
	int dy[13] = { 0, 1, 0, 1,-1, 0, 0, 1, 1, 1, 1,-1,-1};
	int dz[13] = { 0, 0, 1, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};

	bool can(int x,int y,int z) {
		if(0 <= x && x < n && 0 <= y && y < n && 0 <= z && z < n) return true;
		return false;
	}

snippet d8
	int dx[8] = {1,1,0,-1,-1,-1, 0, 1};
	int dy[8] = {0,1,1, 1, 0,-1,-1,-1};

	bool can(int y,int x) {
		if(0 <= y && y < h && 0 <= x && x < w) return true;
		return false;
	}

snippet days
abbr 0:normal 1:leapyear
	int days[2][13] = {	{0,31,28,31,30,31,30,31,31,30,31,30,31},
						{0,31,29,31,30,31,30,31,31,30,31,30,31} };

